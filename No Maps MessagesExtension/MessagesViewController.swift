//
//  MessagesViewController.swift
//  No Maps MessagesExtension
//
//  Created by Michael A Edgcumbe on 3/15/23.
//

import UIKit
import Messages
import SwiftUI

public enum MessagesViewControllerError : Error {
    case NoConversationRecorded
}

public protocol ChatHostingViewControllerDelegate : AnyObject {
    func didTap(question:String)
}

open class MessagesViewController: MSMessagesAppViewController {
    
    var contentView:UIHostingController<ChatResultView>?
    private var messagesViewHeight:CGFloat = 253
    private var chatHost = AssistiveChatHost()
    private var session = MSSession()
    private var chatModel = ChatResultViewModel()
    
    open override func viewDidLoad() {
        super.viewDidLoad()
        chatHost = AssistiveChatHost(delegate:self)
        contentView = UIHostingController(rootView: ChatResultView(chatHostingDelegate:chatHost, chatHost: self.chatHost, messagesViewHeight:.constant(messagesViewHeight), model: self.chatModel))
        addChild(contentView!)
        view.addSubview(contentView!.view)
        
        contentView?.view.translatesAutoresizingMaskIntoConstraints = false
        contentView?.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        contentView?.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        contentView?.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        contentView?.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true

    }
    
    open override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        requestPresentationStyle(.compact)
    }
    
    // MARK: - Conversation Handling
    
    open override func willBecomeActive(with conversation: MSConversation) {
        
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("will become active with selected message:\(conversation.selectedMessage?.summaryText)")
    }
    
    
    open override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    open override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        if message.senderParticipantIdentifier == conversation.localParticipantIdentifier {
            print("Did receive message from device: \(message.summaryText)")
            if let caption = message.summaryText {
                self.chatHost.receiveMessage(caption: caption, isLocalParticipant: true)
            }
        } else {
            print("Did receive message from chat: \(message.summaryText)")
            if let caption = message.summaryText {
                self.chatHost.receiveMessage(caption: caption, isLocalParticipant: false)
            }
        }
    }
    
    open override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        print("did send message")
        // Called when the user taps the send button.
        if message.senderParticipantIdentifier == conversation.localParticipantIdentifier {
            print("Did send message from device: \(message.summaryText)")
        } else {
            print("Did send message from chat: \(message.summaryText)")
        }
    }
    
    open override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    open override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        print("Will transition to \(presentationStyle)")
    }
    
    open override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

public extension MessagesViewController {
    func add(caption:String, to conversation:MSConversation?) throws {
        guard let conversation = conversation else {
            print("No conversation recorded")
            throw MessagesViewControllerError.NoConversationRecorded
        }
        
        print("Adding caption:\(caption) to conversation for participant:\(conversation.localParticipantIdentifier)")
        
        let message = MSMessage(session: session)
        let layout = MSMessageTemplateLayout()
        layout.caption = caption
        message.layout = layout
        message.summaryText = caption
    
        conversation.insert(message) { [unowned self] error in
            if let e = error {
                print(e.localizedDescription)
                return
            }
        }
        
        self.chatHost.appendIntentParameters(intent: AssistiveChatHostIntent(caption: caption, intent: self.chatHost.determineIntent(for: caption)))
    }    
}

extension MessagesViewController : AssistiveChatHostMessagesDelegate {
    public func addReceivedMessage(caption: String, parameters: AssistiveChatHostQueryParameters, isLocalParticipant: Bool) {
        chatModel.receiveMessage(caption: caption, parameters: parameters, isLocalParticipant: isLocalParticipant)
    }
    
    public func send(message: String) {
        print("Send message\(message)")
        do {
            try add(caption: message, to: activeConversation)
        } catch {
            print(error.localizedDescription)
        }
    }
    
    public func didUpdateQuery(with parameters: AssistiveChatHostQueryParameters) {
        print("Did update query with parameters:")
        for intent in parameters.queryIntents {
            print(intent.intent)
            print(intent.caption)
        }
        
        print("Paramaters did update, requesting new chat model")
        chatModel.refreshModel(resultImageSize:nil,queryIntents: parameters.queryIntents )

    }
}
